package me.nemiron.khinkalyator.features.people.page.ui

import androidx.compose.runtime.derivedStateOf
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import com.arkivanov.decompose.ComponentContext
import me.nemiron.khinkalyator.features.people.domain.Emoji
import me.nemiron.khinkalyator.features.people.domain.Person
import me.nemiron.khinkalyator.features.people.domain.PersonId
import me.nemiron.khinkalyator.features.phone.domain.Phone
import kotlin.random.Random

class RealPeoplePageComponent(
    componentContext: ComponentContext
) : PeoplePageComponent, ComponentContext by componentContext {

    private var mockedPeople by mutableStateOf(
        listOf(
            Person(
                id = Random.nextLong(),
                name = "–†–∏—Ç—É–∑–∞",
                phone = null,
                emoji = Emoji("ü¶ú")
            ),
            Person(
                id = Random.nextLong(),
                name = "–≠–ª–∏–Ω–∞ –ó–∞–π–Ω–∏–∫–µ–µ–≤–∞",
                phone = null,
                emoji = Emoji("üêì")
            ),
            Person(
                id = Random.nextLong(),
                name = "–ü–∞–≤–µ–ª –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤",
                phone = Phone("89041930639"),
                emoji = Emoji("üê∫")
            ),
            Person(
                id = Random.nextLong(),
                name = "–ñ–µ–∫–∞ –ö–∞—É—Ä–æ–≤",
                phone = null,
                emoji = Emoji("ü¶¨")
            ),
            Person(
                id = Random.nextLong(),
                name = "–¢–æ–º–æ—á–∫–∞ –¢–∞—Ä–∞–Ω–µ–Ω–∫–æ",
                phone = null,
                emoji = Emoji("üêé")
            ),
            Person(
                id = Random.nextLong(),
                name = "–¢—ë–º–∞ –®–∞–Ω–∏–Ω",
                phone = null,
                emoji = Emoji("üê©")
            ),
            Person(
                id = Random.nextLong(),
                name = "–ú–∞–∫—Å –¶–µ–∫–∏–Ω",
                phone = null,
                emoji = Emoji("üê´")
            ),
            Person(
                id = Random.nextLong(),
                name = "–ù–∞—Å—Ç—è –°—Ç–∞–Ω–∫–æ–≤–∞",
                phone = null,
                emoji = Emoji("üê¨")
            )
        )
    )

    override val peopleViewData by derivedStateOf {
        mockedPeople.map(Person::toPersonFullViewData)
    }

    override fun onPersonAddClick() {
        // TODO: call DialogControl
    }

    override fun onPersonDeleteClick(personId: PersonId) {
        // TODO: call DB for delete item
        mockedPeople = mockedPeople.filter { it.id == personId }
    }

    override fun onPersonClick(personId: PersonId) {
        // TODO: call DialogControl
    }
}