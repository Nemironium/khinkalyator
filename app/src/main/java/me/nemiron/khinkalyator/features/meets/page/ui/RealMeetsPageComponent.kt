package me.nemiron.khinkalyator.features.meets.page.ui

import com.arkivanov.decompose.ComponentContext
import kotlinx.datetime.Clock
import kotlinx.datetime.TimeZone
import kotlinx.datetime.toLocalDateTime
import me.nemiron.khinkalyator.features.emoji.domain.Emoji
import me.nemiron.khinkalyator.features.meets.domain.Meet
import me.nemiron.khinkalyator.features.meets.domain.MeetId
import me.nemiron.khinkalyator.features.people.domain.Person
import me.nemiron.khinkalyator.features.phone.domain.Phone
import me.nemiron.khinkalyator.features.restaraunts.domain.Address
import me.nemiron.khinkalyator.features.restaraunts.domain.Restaurant
import kotlin.random.Random

class RealMeetsPageComponent(
    componentContext: ComponentContext,
    private val onOutput: (MeetsPageComponent.Output) -> Unit
) : MeetsPageComponent, ComponentContext by componentContext {

    private val mockedRestaurants = listOf(
        Restaurant(
            id = Random.nextLong(),
            name = "–ö–∞—Ö–∞ –±–∞—Ä",
            address = Address("—É–ª. –†—É–±–∏–Ω—à—Ç–µ–π–Ω–∞, 24"),
            phone = Phone("89219650524"),
            menu = emptyList()
        ),
        Restaurant(
            id = Random.nextLong(),
            name = "–ö–∞—Ö–∞ –±–∞—Ä",
            address = Address("–ë–æ–ª—å—à–æ–π –ø—Ä–æ—Å–ø–µ–∫—Ç –ü.–°., 82"),
            phone = null,
            menu = emptyList()
        ),
        Restaurant(
            id = Random.nextLong(),
            name = "–ü—Ö–∞–ª–∏-—Ö–∏–Ω–∫–∞–ª–∏",
            address = Address("–ë–æ–ª—å—à–∞—è –ú–æ—Ä—Å–∫–∞—è —É–ª., 27"),
            phone = Phone("89219650524"),
            menu = emptyList()
        )
    )

    private val mockedPeople = listOf(
        Person(
            id = Random.nextLong(),
            name = "–†–∏—Ç—É–∑–∞",
            phone = null,
            emoji = Emoji("üêµ")
        ),
        Person(
            id = Random.nextLong(),
            name = "–≠–ª–∏–Ω–∞ –ó–∞–π–Ω–∏–∫–µ–µ–≤–∞",
            phone = null,
            emoji = Emoji("üê∞")
        ),
        Person(
            id = Random.nextLong(),
            name = "–ü–∞–≤–µ–ª –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤",
            phone = Phone("89041930639"),
            emoji = Emoji("üêô")
        ),
        Person(
            id = Random.nextLong(),
            name = "–ñ–µ–∫–∞ –ö–∞—É—Ä–æ–≤",
            phone = null,
            emoji = Emoji("üê®")
        ),
        Person(
            id = Random.nextLong(),
            name = "–¢–æ–º–æ—á–∫–∞ –¢–∞—Ä–∞–Ω–µ–Ω–∫–æ",
            phone = null,
            emoji = Emoji("ü¶Ñ")
        ),
        Person(
            id = Random.nextLong(),
            name = "–¢—ë–º–∞ –®–∞–Ω–∏–Ω",
            phone = null,
            emoji = Emoji("üêº")
        ),
        Person(
            id = Random.nextLong(),
            name = "–ú–∞–∫—Å –¶–µ–∫–∏–Ω",
            phone = null,
            emoji = Emoji("üêÆ")
        ),
        Person(
            id = Random.nextLong(),
            name = "–ù–∞—Å—Ç—è –°—Ç–∞–Ω–∫–æ–≤–∞",
            phone = null,
            emoji = Emoji("üê±")
        )
    )

    private val mockedMeets = buildList {
        val currentTimeZone = TimeZone.currentSystemDefault()
        val todayDate = Clock.System.now().toLocalDateTime(currentTimeZone)

        add(
            Meet(
                id = Random.nextLong(),
                type = Meet.Type.Active,
                restaurant = mockedRestaurants.component1(),
                persons = mockedPeople.shuffled()
            )
        )

        add(
            Meet(
                id = Random.nextLong(),
                type = Meet.Type.Archived(todayDate),
                restaurant = mockedRestaurants.component2(),
                persons = mockedPeople.shuffled().take(3)
            )
        )

        add(
            Meet(
                id = Random.nextLong(),
                type = Meet.Type.Archived(todayDate),
                restaurant = mockedRestaurants.component3(),
                persons = mockedPeople.shuffled().take(4)
            )
        )
    }

    override val meetsViewData = mockedMeets.map(Meet::toMeetFullViewData)

    override fun onMeetAddClick() {
        onOutput(MeetsPageComponent.Output.NewMeetRequested)
    }

    override fun onMeetClick(meetId: MeetId) {
        onOutput(MeetsPageComponent.Output.MeetRequested(meetId))
    }
}